{
  "address": "0x5a5957A9da66e7773DC2b62Df45EE1516878bedF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ResilientOracleInterface",
          "name": "resilientOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleConfigured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRICES_SLOT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESILIENT_ORACLE",
      "outputs": [
        {
          "internalType": "contract ResilientOracleInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReferenceOracle.ExternalPrice[]",
          "name": "externalPrices",
          "type": "tuple[]"
        }
      ],
      "name": "getPriceAssuming",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "contract OracleInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "contract OracleInterface",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec08f94e701c5e085c51c3f7b50c022fbc146d9e61dba021a26d068d1e93de94",
  "receipt": {
    "to": null,
    "from": "0x780994aF5acD9a4f1c6D05db794350a975efEf1d",
    "contractAddress": "0x5a5957A9da66e7773DC2b62Df45EE1516878bedF",
    "transactionIndex": 35,
    "gasUsed": "662478",
    "logsBloom": "0x
    "blockHash": "0x6c923af3e2c908379cdc454c2f2762b889da1e01a737feb50d0683923a7ce1c1",
    "transactionHash": "0xec08f94e701c5e085c51c3f7b50c022fbc146d9e61dba021a26d068d1e93de94",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 21864955,
        "transactionHash": "0xec08f94e701c5e085c51c3f7b50c022fbc146d9e61dba021a26d068d1e93de94",
        "address": "0x5a5957A9da66e7773DC2b62Df45EE1516878bedF",
        "topics": ["0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 318,
        "blockHash": "0x6c923af3e2c908379cdc454c2f2762b889da1e01a737feb50d0683923a7ce1c1"
      }
    ],
    "blockNumber": 21864955,
    "cumulativeGasUsed": "11873939",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xd2ce3fb018805ef92b8C5976cb31F84b4E295F94"],
  "numDeployments": 1,
  "solcInputHash": "c3627496deae3f549b7b46b372e638a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ResilientOracleInterface\",\"name\":\"resilientOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICES_SLOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESILIENT_ORACLE\",\"outputs\":[{\"internalType\":\"contract ResilientOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferenceOracle.ExternalPrice[]\",\"name\":\"externalPrices\",\"type\":\"tuple[]\"}],\"name\":\"getPriceAssuming\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"contract OracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract OracleInterface\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"custom:error\":\"ZeroAddressNotAllowed is thrown if resilient oracle address is null\",\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"params\":{\"resilientOracle\":\"Resilient oracle address\"}},\"getPrice(address)\":{\"params\":{\"asset\":\"asset address\"},\"returns\":{\"_0\":\"USD price in scaled decimal places\"}},\"getPriceAssuming(address,(address,uint256)[])\":{\"params\":{\"asset\":\"asset address\",\"externalPrices\":\"an array of prices for other assets\"},\"returns\":{\"_0\":\"USD price in scaled decimal places\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setOracle(address,address)\":{\"custom:access\":\"Only owner\",\"custom:error\":\"ZeroAddressNotAllowed is thrown if asset address is null\",\"custom:event\":\"Emits OracleConfigured event\",\"details\":\"The production resilientOracle will be used if zero address is passed\",\"params\":{\"asset\":\"Asset address\",\"oracle\":\"Oracle address\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"RESILIENT_ORACLE\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"title\":\"ReferenceOracle\",\"version\":1},\"userdoc\":{\"errors\":{\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"events\":{\"OracleConfigured(address,address)\":{\"notice\":\"Event emitted when an oracle is set\"}},\"kind\":\"user\",\"methods\":{\"PRICES_SLOT()\":{\"notice\":\"Slot to temporarily store price information from external sources like CMC/Coingecko, useful to compute prices of derivative assets based on prices of the base assets with no on chain price information\"},\"RESILIENT_ORACLE()\":{\"notice\":\"Resilient oracle address\"},\"constructor\":{\"notice\":\"Constructor for the implementation contract. Sets immutable variables.\"},\"getPrice(address)\":{\"notice\":\"Gets price of the asset\"},\"getPriceAssuming(address,(address,uint256)[])\":{\"notice\":\"Gets price of the asset assuming other assets have the defined price\"},\"initialize()\":{\"notice\":\"Initializes the contract admin\"},\"oracles(address)\":{\"notice\":\"Oracle configuration for assets\"},\"setOracle(address,address)\":{\"notice\":\"Sets an oracle to use for a specific asset\"}},\"notice\":\"Reference oracle is the oracle that is not used for production but required for price monitoring. This oracle contains some extra configurations for assets required to compute reference prices of their derivative assets (OneJump, ERC4626, Pendle, etc.)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReferenceOracle.sol\":\"ReferenceOracle\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9140dabc466abab21b48b72dbda26736b1183a310d0e677d3719d201df026510\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Thrown if the supplied value is 0 where it is not allowed\\nerror ZeroValueNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\\n/// @notice Checks if the provided value is nonzero, reverts otherwise\\n/// @param value_ Value to check\\n/// @custom:error ZeroValueNotAllowed is thrown if the provided value is 0\\nfunction ensureNonzeroValue(uint256 value_) pure {\\n    if (value_ == 0) {\\n        revert ZeroValueNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0xdb88e14d50dd21889ca3329d755673d022c47e8da005b6a545c7f69c2c4b7b86\",\"license\":\"BSD-3-Clause\"},\"contracts/ReferenceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n// SPDX-FileCopyrightText: 2025 Venus\\npragma solidity 0.8.25;\\n\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\nimport { ResilientOracleInterface, OracleInterface } from \\\"./interfaces/OracleInterface.sol\\\";\\n\\n/**\\n * @title ReferenceOracle\\n * @author Venus\\n * @notice Reference oracle is the oracle that is not used for production but required for\\n * price monitoring. This oracle contains some extra configurations for assets required to\\n * compute reference prices of their derivative assets (OneJump, ERC4626, Pendle, etc.)\\n */\\ncontract ReferenceOracle is Ownable2StepUpgradeable, OracleInterface {\\n    struct ExternalPrice {\\n        /// @notice asset address\\n        address asset;\\n        /// @notice price of the asset from an external source\\n        uint256 price;\\n    }\\n\\n    /// @notice Slot to temporarily store price information from external sources\\n    /// like CMC/Coingecko, useful to compute prices of derivative assets based on\\n    /// prices of the base assets with no on chain price information\\n    bytes32 public constant PRICES_SLOT = keccak256(abi.encode(\\\"venus-protocol/oracle/ReferenceOracle/prices\\\"));\\n\\n    /// @notice Resilient oracle address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    ResilientOracleInterface public immutable RESILIENT_ORACLE;\\n\\n    /// @notice Oracle configuration for assets\\n    mapping(address => OracleInterface) public oracles;\\n\\n    /// @notice Event emitted when an oracle is set\\n    event OracleConfigured(address indexed asset, address indexed oracle);\\n\\n    /**\\n     * @notice Constructor for the implementation contract. Sets immutable variables.\\n     * @param resilientOracle Resilient oracle address\\n     * @custom:error ZeroAddressNotAllowed is thrown if resilient oracle address is null\\n     * @custom:oz-upgrades-unsafe-allow constructor\\n     */\\n    constructor(ResilientOracleInterface resilientOracle) {\\n        ensureNonzeroAddress(address(resilientOracle));\\n        RESILIENT_ORACLE = resilientOracle;\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes the contract admin\\n     */\\n    function initialize() external initializer {\\n        __Ownable2Step_init();\\n    }\\n\\n    /**\\n     * @notice Sets an oracle to use for a specific asset\\n     * @dev The production resilientOracle will be used if zero address is passed\\n     * @param asset Asset address\\n     * @param oracle Oracle address\\n     * @custom:access Only owner\\n     * @custom:error ZeroAddressNotAllowed is thrown if asset address is null\\n     * @custom:event Emits OracleConfigured event\\n     */\\n    function setOracle(address asset, OracleInterface oracle) external onlyOwner {\\n        ensureNonzeroAddress(asset);\\n        oracles[asset] = OracleInterface(oracle);\\n        emit OracleConfigured(asset, address(oracle));\\n    }\\n\\n    /**\\n     * @notice Gets price of the asset assuming other assets have the defined price\\n     * @param asset asset address\\n     * @param externalPrices an array of prices for other assets\\n     * @return USD price in scaled decimal places\\n     */\\n    function getPriceAssuming(address asset, ExternalPrice[] memory externalPrices) external returns (uint256) {\\n        uint256 externalPricesCount = externalPrices.length;\\n        for (uint256 i = 0; i < externalPricesCount; ++i) {\\n            _storeExternalPrice(externalPrices[i].asset, externalPrices[i].price);\\n        }\\n        return _getPrice(asset);\\n    }\\n\\n    /**\\n     * @notice Gets price of the asset\\n     * @param asset asset address\\n     * @return USD price in scaled decimal places\\n     */\\n    function getPrice(address asset) external view override returns (uint256) {\\n        return _getPrice(asset);\\n    }\\n\\n    function _storeExternalPrice(address asset, uint256 price) internal {\\n        bytes32 slot = keccak256(abi.encode(PRICES_SLOT, asset));\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, price)\\n        }\\n    }\\n\\n    function _getPrice(address asset) internal view returns (uint256) {\\n        uint256 externalPrice = _loadExternalPrice(asset);\\n        if (externalPrice != 0) {\\n            return externalPrice;\\n        }\\n        OracleInterface oracle = oracles[asset];\\n        if (oracle != OracleInterface(address(0))) {\\n            return oracle.getPrice(asset);\\n        }\\n        return RESILIENT_ORACLE.getPrice(asset);\\n    }\\n\\n    function _loadExternalPrice(address asset) internal view returns (uint256 value) {\\n        bytes32 slot = keccak256(abi.encode(PRICES_SLOT, asset));\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa088ba1fb64a6e4a56fc174dd53834d8588d26d99dc5a9940a9f7810e09de8cc\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2432799b0d824fc701beb4c30146e912b9aeecf77b5c1635dde6c5fbe6bfc3a7\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561000f575f80fd5b50604051610bff380380610bff83398101604081905261002e91610138565b61003781610052565b6001600160a01b03811660805261004c61007c565b50610165565b6001600160a01b038116610079576040516342bcdf7f60e11b815260040160405180910390fd5b50565b5f54610100900460ff16156100e75760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff90811614610136575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b5f60208284031215610148575f80fd5b81516001600160a01b038116811461015e575f80fd5b9392505050565b608051610a7b6101845f395f818161014d01526105f00152610a7b5ff3fe608060405234801561000f575f80fd5b50600436106100b1575f3560e01c80638129fc1c1161006e5780638129fc1c1461011b5780638da5cb5b14610123578063a4edcd4c14610148578063addd50991461016f578063e30c397814610197578063f2fde38b146101a8575f80fd5b8063310770b5146100b557806341976e09146100db578063539b18a1146100ee5780635c38eb3a146100f6578063715018a61461010b57806379ba509714610113575b5f80fd5b6100c86100c3366004610847565b6101bb565b6040519081526020015b60405180910390f35b6100c86100e936600461092a565b610226565b6100c8610236565b61010961010436600461094c565b61025e565b005b6101096102c5565b6101096102d8565b610109610357565b6033546001600160a01b03165b6040516001600160a01b0390911681526020016100d2565b6101307f000000000000000000000000000000000000000000000000000000000000000081565b61013061017d36600461092a565b60976020525f90815260409020546001600160a01b031681565b6065546001600160a01b0316610130565b6101096101b636600461092a565b610461565b80515f90815b818110156102145761020c8482815181106101de576101de610983565b60200260200101515f01518583815181106101fb576101fb610983565b6020026020010151602001516104d2565b6001016101c1565b5061021e8461052f565b949350505050565b5f6102308261052f565b92915050565b60405160200161024590610997565b6040516020818303038152906040528051906020012081565b61026661061f565b61026f82610679565b6001600160a01b038281165f8181526097602052604080822080546001600160a01b0319169486169485179055517fe625c7b7d4661988d3a1140f3225faefa7b57c73524adb62fd77dbc945a6db829190a35050565b6102cd61061f565b6102d65f6106a0565b565b60655433906001600160a01b0316811461034b5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b610354816106a0565b50565b5f54610100900460ff161580801561037557505f54600160ff909116105b8061038e5750303b15801561038e57505f5460ff166001145b6103f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610342565b5f805460ff191660011790558015610412575f805461ff0019166101001790555b61041a6106b9565b8015610354575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b61046961061f565b606580546001600160a01b0383166001600160a01b0319909116811790915561049a6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f6040516020016104e290610997565b60408051601f198184030181528282528051602091820120908301526001600160a01b0385169082015260600160405160208183030381529060405280519060200120905081815d505050565b5f8061053a836106e7565b905080156105485792915050565b6001600160a01b038084165f908152609760205260409020541680156105d1576040516341976e0960e01b81526001600160a01b0385811660048301528216906341976e09906024015b602060405180830381865afa1580156105ad573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061021e91906109e3565b6040516341976e0960e01b81526001600160a01b0385811660048301527f000000000000000000000000000000000000000000000000000000000000000016906341976e0990602401610592565b6033546001600160a01b031633146102d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610342565b6001600160a01b038116610354576040516342bcdf7f60e11b815260040160405180910390fd5b606580546001600160a01b031916905561035481610745565b5f54610100900460ff166106df5760405162461bcd60e51b8152600401610342906109fa565b6102d6610796565b5f806040516020016106f890610997565b60408051601f198184030181528282528051602091820120908301526001600160a01b0385169082015260600160408051601f1981840301815291905280516020909101205c9392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166107bc5760405162461bcd60e51b8152600401610342906109fa565b6102d6336106a0565b6001600160a01b0381168114610354575f80fd5b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715610810576108106107d9565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561083f5761083f6107d9565b604052919050565b5f806040808486031215610859575f80fd5b8335610864816107c5565b925060208481013567ffffffffffffffff80821115610881575f80fd5b818701915087601f830112610894575f80fd5b8135818111156108a6576108a66107d9565b6108b4848260051b01610816565b818152848101925060069190911b8301840190898211156108d3575f80fd5b928401925b8184101561091a5785848b0312156108ee575f80fd5b6108f66107ed565b8435610901816107c5565b81528486013586820152835292850192918401916108d8565b8096505050505050509250929050565b5f6020828403121561093a575f80fd5b8135610945816107c5565b9392505050565b5f806040838503121561095d575f80fd5b8235610968816107c5565b91506020830135610978816107c5565b809150509250929050565b634e487b7160e01b5f52603260045260245ffd5b6020808252602c908201527f76656e75732d70726f746f636f6c2f6f7261636c652f5265666572656e63654f60408201526b7261636c652f70726963657360a01b606082015260800190565b5f602082840312156109f3575f80fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220f5b180c90079222f56ff0632364aaad609c5037d6f5aae37e6ac08ff03a854d864736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106100b1575f3560e01c80638129fc1c1161006e5780638129fc1c1461011b5780638da5cb5b14610123578063a4edcd4c14610148578063addd50991461016f578063e30c397814610197578063f2fde38b146101a8575f80fd5b8063310770b5146100b557806341976e09146100db578063539b18a1146100ee5780635c38eb3a146100f6578063715018a61461010b57806379ba509714610113575b5f80fd5b6100c86100c3366004610847565b6101bb565b6040519081526020015b60405180910390f35b6100c86100e936600461092a565b610226565b6100c8610236565b61010961010436600461094c565b61025e565b005b6101096102c5565b6101096102d8565b610109610357565b6033546001600160a01b03165b6040516001600160a01b0390911681526020016100d2565b6101307f000000000000000000000000000000000000000000000000000000000000000081565b61013061017d36600461092a565b60976020525f90815260409020546001600160a01b031681565b6065546001600160a01b0316610130565b6101096101b636600461092a565b610461565b80515f90815b818110156102145761020c8482815181106101de576101de610983565b60200260200101515f01518583815181106101fb576101fb610983565b6020026020010151602001516104d2565b6001016101c1565b5061021e8461052f565b949350505050565b5f6102308261052f565b92915050565b60405160200161024590610997565b6040516020818303038152906040528051906020012081565b61026661061f565b61026f82610679565b6001600160a01b038281165f8181526097602052604080822080546001600160a01b0319169486169485179055517fe625c7b7d4661988d3a1140f3225faefa7b57c73524adb62fd77dbc945a6db829190a35050565b6102cd61061f565b6102d65f6106a0565b565b60655433906001600160a01b0316811461034b5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b610354816106a0565b50565b5f54610100900460ff161580801561037557505f54600160ff909116105b8061038e5750303b15801561038e57505f5460ff166001145b6103f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610342565b5f805460ff191660011790558015610412575f805461ff0019166101001790555b61041a6106b9565b8015610354575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b61046961061f565b606580546001600160a01b0383166001600160a01b0319909116811790915561049a6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f6040516020016104e290610997565b60408051601f198184030181528282528051602091820120908301526001600160a01b0385169082015260600160405160208183030381529060405280519060200120905081815d505050565b5f8061053a836106e7565b905080156105485792915050565b6001600160a01b038084165f908152609760205260409020541680156105d1576040516341976e0960e01b81526001600160a01b0385811660048301528216906341976e09906024015b602060405180830381865afa1580156105ad573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061021e91906109e3565b6040516341976e0960e01b81526001600160a01b0385811660048301527f000000000000000000000000000000000000000000000000000000000000000016906341976e0990602401610592565b6033546001600160a01b031633146102d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610342565b6001600160a01b038116610354576040516342bcdf7f60e11b815260040160405180910390fd5b606580546001600160a01b031916905561035481610745565b5f54610100900460ff166106df5760405162461bcd60e51b8152600401610342906109fa565b6102d6610796565b5f806040516020016106f890610997565b60408051601f198184030181528282528051602091820120908301526001600160a01b0385169082015260600160408051601f1981840301815291905280516020909101205c9392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166107bc5760405162461bcd60e51b8152600401610342906109fa565b6102d6336106a0565b6001600160a01b0381168114610354575f80fd5b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715610810576108106107d9565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561083f5761083f6107d9565b604052919050565b5f806040808486031215610859575f80fd5b8335610864816107c5565b925060208481013567ffffffffffffffff80821115610881575f80fd5b818701915087601f830112610894575f80fd5b8135818111156108a6576108a66107d9565b6108b4848260051b01610816565b818152848101925060069190911b8301840190898211156108d3575f80fd5b928401925b8184101561091a5785848b0312156108ee575f80fd5b6108f66107ed565b8435610901816107c5565b81528486013586820152835292850192918401916108d8565b8096505050505050509250929050565b5f6020828403121561093a575f80fd5b8135610945816107c5565b9392505050565b5f806040838503121561095d575f80fd5b8235610968816107c5565b91506020830135610978816107c5565b809150509250929050565b634e487b7160e01b5f52603260045260245ffd5b6020808252602c908201527f76656e75732d70726f746f636f6c2f6f7261636c652f5265666572656e63654f60408201526b7261636c652f70726963657360a01b606082015260800190565b5f602082840312156109f3575f80fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220f5b180c90079222f56ff0632364aaad609c5037d6f5aae37e6ac08ff03a854d864736f6c63430008190033",
  "devdoc": {
    "author": "Venus",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "custom:error": "ZeroAddressNotAllowed is thrown if resilient oracle address is null",
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "params": {
          "resilientOracle": "Resilient oracle address"
        }
      },
      "getPrice(address)": {
        "params": {
          "asset": "asset address"
        },
        "returns": {
          "_0": "USD price in scaled decimal places"
        }
      },
      "getPriceAssuming(address,(address,uint256)[])": {
        "params": {
          "asset": "asset address",
          "externalPrices": "an array of prices for other assets"
        },
        "returns": {
          "_0": "USD price in scaled decimal places"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setOracle(address,address)": {
        "custom:access": "Only owner",
        "custom:error": "ZeroAddressNotAllowed is thrown if asset address is null",
        "custom:event": "Emits OracleConfigured event",
        "details": "The production resilientOracle will be used if zero address is passed",
        "params": {
          "asset": "Asset address",
          "oracle": "Oracle address"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "RESILIENT_ORACLE": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "title": "ReferenceOracle",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "events": {
      "OracleConfigured(address,address)": {
        "notice": "Event emitted when an oracle is set"
      }
    },
    "kind": "user",
    "methods": {
      "PRICES_SLOT()": {
        "notice": "Slot to temporarily store price information from external sources like CMC/Coingecko, useful to compute prices of derivative assets based on prices of the base assets with no on chain price information"
      },
      "RESILIENT_ORACLE()": {
        "notice": "Resilient oracle address"
      },
      "constructor": {
        "notice": "Constructor for the implementation contract. Sets immutable variables."
      },
      "getPrice(address)": {
        "notice": "Gets price of the asset"
      },
      "getPriceAssuming(address,(address,uint256)[])": {
        "notice": "Gets price of the asset assuming other assets have the defined price"
      },
      "initialize()": {
        "notice": "Initializes the contract admin"
      },
      "oracles(address)": {
        "notice": "Oracle configuration for assets"
      },
      "setOracle(address,address)": {
        "notice": "Sets an oracle to use for a specific asset"
      }
    },
    "notice": "Reference oracle is the oracle that is not used for production but required for price monitoring. This oracle contains some extra configurations for assets required to compute reference prices of their derivative assets (OneJump, ERC4626, Pendle, etc.)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/ReferenceOracle.sol:ReferenceOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 249,
        "contract": "contracts/ReferenceOracle.sol:ReferenceOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 788,
        "contract": "contracts/ReferenceOracle.sol:ReferenceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 118,
        "contract": "contracts/ReferenceOracle.sol:ReferenceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 238,
        "contract": "contracts/ReferenceOracle.sol:ReferenceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/ReferenceOracle.sol:ReferenceOracle",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 105,
        "contract": "contracts/ReferenceOracle.sol:ReferenceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 870,
        "contract": "contracts/ReferenceOracle.sol:ReferenceOracle",
        "label": "oracles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_contract(OracleInterface)1097)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(OracleInterface)1097": {
        "encoding": "inplace",
        "label": "contract OracleInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(OracleInterface)1097)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract OracleInterface)",
        "numberOfBytes": "32",
        "value": "t_contract(OracleInterface)1097"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
