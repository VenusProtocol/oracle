{
  "language": "Solidity",
  "sources": {
    "contracts/oracles/mocks/MockPivotTwapOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../PivotTwapOracle.sol\";\nimport \"../../interfaces/VBep20Interface.sol\";\n\ncontract MockPivotTwapOracle is OwnableUpgradeable {\n    mapping(address => uint256) public assetPrices;\n\n    /// @notice vBNB address\n    address public vBNB;\n\n    //set price in 6 decimal precision\n    constructor() {}\n\n    function initialize(address vBNB_) public initializer {\n        __Ownable_init();\n        require(vBNB_ != address(0), \"vBNB can't be zero address\");\n        vBNB = vBNB_;\n    }\n\n    function setPrice(address asset, uint256 price) external {\n        assetPrices[asset] = price;\n    }\n\n    //https://compound.finance/docs/prices\n    function getUnderlyingPrice(address vToken) public view returns (uint256) {\n        return assetPrices[vToken];\n    }\n}\n"
    },
    "contracts/oracles/PivotTwapOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./BoundValidator.sol\";\nimport \"./TwapOracle.sol\";\nimport \"../interfaces/BEP20Interface.sol\";\nimport \"../interfaces/VBep20Interface.sol\";\n\ncontract PivotTwapOracle is TwapOracle, BoundValidator, PivotOracleInterface {\n    /**\n     * @notice Test reported vToken underlying price against stored TWAP\n     * @param vToken vToken address\n     * @param reporterPrice the price to be tested\n     */\n    function validatePrice(address vToken, uint256 reporterPrice) external view override returns (bool) {\n        address asset = VBep20Interface(vToken).underlying();\n        return validatePriceWithAnchorPrice(vToken, reporterPrice, prices[asset]);\n    }\n}\n"
    },
    "contracts/interfaces/VBep20Interface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./BEP20Interface.sol\";\n\ninterface VBep20Interface is BEP20Interface {\n    /**\n     * @notice Underlying asset for this VToken\n     */\n    function underlying() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/oracles/BoundValidator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../interfaces/BEP20Interface.sol\";\nimport \"../interfaces/VBep20Interface.sol\";\n\nstruct ValidateConfig {\n    /// @notice asset address\n    address asset;\n    /// @notice upper bound of deviation between reported price and anchor price,\n    /// beyond which the reported price will be invalidated \n    uint256 upperBoundRatio;\n    /// @notice lower bound of deviation between reported price and anchor price,\n    /// below which the reported price will be invalidated \n    uint256 lowerBoundRatio;\n}\n\n// BoundValidator provides some common functions and can be used\n// to wrap up other contracts to form pivot oracles\ncontract BoundValidator is OwnableUpgradeable {\n    /// @notice validation configs by asset\n    mapping(address => ValidateConfig) public validateConfigs;\n\n    /// @notice Emit this event when new validate configs are added\n    event ValidateConfigAdded(\n        address indexed asset, \n        uint256 indexed upperBound,\n        uint256 indexed lowerBound\n    );\n\n    /**\n     * @notice Add multiple validation configs at the same time\n     * @param configs config array \n     */\n    function setValidateConfigs(ValidateConfig[] memory configs) external virtual onlyOwner() {\n        require(configs.length > 0, \"invalid validate config length\");\n        for (uint8 i = 0; i < configs.length; i++) {\n            setValidateConfig(configs[i]);\n        }\n    }\n\n    /**\n     * @notice Add single validation config\n     * @param config config struct\n     */\n    function setValidateConfig(ValidateConfig memory config) public virtual onlyOwner()\n    {\n        require(config.asset != address(0), \"asset can't be zero address\");\n        require(config.upperBoundRatio > 0 && config.lowerBoundRatio > 0, \"bound must be positive\");\n        require(config.upperBoundRatio > config.lowerBoundRatio, \"upper bound must be higher than lowner bound\");\n        validateConfigs[config.asset] = config;\n        emit ValidateConfigAdded(\n            config.asset, \n            config.upperBoundRatio,\n            config.lowerBoundRatio\n        );\n    }\n    \n    /**\n     * @notice Test reported asset price against anchor price\n     * @param vToken vToken address\n     * @param reporterPrice the price to be tested\n     */\n    function validatePriceWithAnchorPrice(\n        address vToken,\n        uint256 reporterPrice, \n        uint256 anchorPrice) public view virtual returns (bool) \n    {\n        address asset = VBep20Interface(vToken).underlying();\n\n        require(validateConfigs[asset].upperBoundRatio != 0, \"validation config not exist\");\n        require(anchorPrice != 0, \"anchor price is not valid\");\n        return _isWithinAnchor(asset, reporterPrice, anchorPrice);\n    }\n\n    /**\n     * @notice Test whether the reported price is within the predefined bounds\n     * @param asset asset address\n     * @param reporterPrice the price to be tested\n     * @param anchorPrice anchor price as testing anchor\n     */\n    function _isWithinAnchor(address asset, uint256 reporterPrice, uint256 anchorPrice) internal view returns (bool) {\n        if (reporterPrice > 0) {\n            uint256 anchorRatio = (anchorPrice * 100e16) / reporterPrice;\n            uint256 upperBoundAnchorRatio = validateConfigs[asset].upperBoundRatio;\n            uint256 lowerBoundAnchorRatio = validateConfigs[asset].lowerBoundRatio;\n            return anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\n        }\n        return false;\n    }\n\n    // BoundValidator is to get inherited, so it's a good practice to add some storage gaps like\n    // OpenZepplin proposed in their contracts: https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/oracles/TwapOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../libraries/PancakeLibrary.sol\";\nimport \"../interfaces/OracleInterface.sol\";\nimport \"../interfaces/BEP20Interface.sol\";\nimport \"../interfaces/VBep20Interface.sol\";\n\nstruct Observation {\n    uint256 timestamp;\n    uint256 acc;\n}\n\nstruct TokenConfig {\n    /// @notice asset address, which can't be zero address and can be used for existance check\n    address asset;\n    /// @notice Decimals of underlying asset\n    uint256 baseUnit;\n    /// @notice The address of pancake pair\n    address pancakePool;\n    /// @notice Whether the token is paired with WBNB\n    bool isBnbBased;\n    /// @notice A flag identifies whether the pancake pair is reversed\n    /// e.g. XVS-WBNB is not reversed, while WBNB-XVS is.\n    bool isReversedPool;\n    /// @notice TWAP update period in second, which is the minimum time in seconds required to update TWAP window\n    uint256 anchorPeriod;\n}\n\ncontract TwapOracle is OwnableUpgradeable, TwapInterface {\n    using FixedPoint for *;\n\n    /// @notice WBNB address\n    address public WBNB;\n\n    /// @notice the base unit of WBNB and BUSD, which are the paired tokens for all assets\n    uint256 public constant bnbBaseUnit = 1e18;\n    uint256 public constant busdBaseUnit = 1e18;\n\n    uint256 public constant expScale = 1e18;\n\n    /// @notice Configs by token\n    mapping(address => TokenConfig) public tokenConfigs;\n\n    /// @notice The current price observation of TWAP. With old and current observations\n    /// we can calculate the TWAP between this range\n    mapping(address => Observation) public newObservations;\n\n    /// @notice The old price observation of TWAP\n    mapping(address => Observation) public oldObservations;\n\n    /// @notice Stored price by token \n    mapping(address => uint256) public prices;\n\n    /// @notice Emit this event when TWAP window is updated\n    event TwapWindowUpdated(\n        address indexed asset, \n        uint256 oldTimestamp, \n        uint256 oldAcc, \n        uint256 newTimestamp, \n        uint256 newAcc);\n\n    /// @notice Emit this event when TWAP price is updated\n    event AnchorPriceUpdated(\n        address indexed asset,\n        uint256 price, \n        uint256 oldTimestamp, \n        uint256 newTimestamp\n    );\n\n    /// @notice Emit this event when new token configs are added\n    event TokenConfigAdded(\n        address indexed asset, \n        address indexed pancakePool,\n        uint256 indexed anchorPeriod\n    );\n\n    modifier notNullAddress(address someone) {\n        require(someone != address(0), \"can't be zero address\");\n        _;\n    }\n\n    function initialize(address WBNB_) public initializer {\n        __Ownable_init();\n        require(WBNB_ != address(0), \"WBNB can't be zero address\");\n        WBNB = WBNB_;\n    }\n\n    /**\n     * @notice Add multiple token configs at the same time\n     * @param configs config array\n     */\n    function setTokenConfigs(TokenConfig[] memory configs) external onlyOwner() {\n        require(configs.length > 0, \"length can't be 0\");\n        for (uint8 i = 0; i < configs.length; i++) {\n            setTokenConfig(configs[i]);\n        }\n    }\n\n    /**\n     * @notice Add single token configs\n     * @param config token config struct\n     */\n    function setTokenConfig(TokenConfig memory config) public \n        onlyOwner()\n        notNullAddress(config.asset)\n        notNullAddress(config.pancakePool)\n    {\n        require(config.anchorPeriod > 0, \"anchor period must be positive\");\n        require(config.baseUnit > 0, \"base unit must be positive\");\n        uint256 cumulativePrice = currentCumulativePrice(config);\n\n        // Initialize observation data\n        oldObservations[config.asset].timestamp = block.timestamp;\n        newObservations[config.asset].timestamp = block.timestamp;\n        oldObservations[config.asset].acc = cumulativePrice;\n        newObservations[config.asset].acc = cumulativePrice;\n        tokenConfigs[config.asset] = config;\n        emit TokenConfigAdded(\n            config.asset, \n            config.pancakePool,\n            config.anchorPeriod\n        );\n    }\n\n    /**\n     * @notice Get the underlying TWAP price of input vToken\n     * @param vToken vToken address\n     * @return price in USD, with 18 decimals\n     */\n    function getUnderlyingPrice(address vToken) external override view returns (uint256) {\n        address asset = VBep20Interface(vToken).underlying();\n        require(tokenConfigs[asset].asset != address(0), \"asset not exist\");\n        \n        uint256 price = prices[asset];\n\n        // if price is 0, it means the price hasn't been updated yet and it's meaningless, revert\n        require(price > 0, \"TWAP price must be positive\"); \n\n        BEP20Interface underlyingToken = BEP20Interface(VBep20Interface(vToken).underlying());\n        return (price * (10 ** (18 - underlyingToken.decimals())));\n    }\n\n    /**\n     * @notice Fetches the current token/WBNB and token/BUSD price accumulator from pancakeswap.\n     * @return cumulative price of target token regardless of pair order \n     */\n    function currentCumulativePrice(TokenConfig memory config) public view returns (uint256) {\n        (uint256 price0, uint256 price1,) = PancakeOracleLibrary.currentCumulativePrices(config.pancakePool);\n        if (config.isReversedPool) {\n            return price1;\n        } else {\n            return price0;\n        }\n    }\n\n    function updateTwap(address vToken) public returns (uint256) {\n        address asset = VBep20Interface(vToken).underlying();\n        require(tokenConfigs[asset].asset != address(0), \"asset not exist\");\n        // Update & fetch WBNB price first, so we can calculate the price of WBNB paired token\n        if (asset != WBNB && tokenConfigs[asset].isBnbBased) {\n            require(tokenConfigs[WBNB].asset != address(0), \"WBNB not exist\");\n            _updateTwapInternal(tokenConfigs[WBNB]);\n        }\n        return _updateTwapInternal(tokenConfigs[asset]);\n    }\n\n    /**\n     * @notice Fetches the current token/BUSD price from PancakeSwap, with 18 decimals of precision.\n     * @return price in USD, with 18 decimals\n     */\n    function _updateTwapInternal(TokenConfig memory config) internal virtual returns (uint256) {\n        // pokeWindowValues already handled reversed pool cases, \n        // priceAverage will always be Token/BNB or Token/BUSD TWAP price.\n        (uint256 nowCumulativePrice, uint256 oldCumulativePrice, uint256 oldTimestamp) = pokeWindowValues(config);\n\n        // This should be impossible, but better safe than sorry\n        require(block.timestamp > oldTimestamp, \"now must come after before\");\n        uint256 timeElapsed = block.timestamp - oldTimestamp;\n\n        // Calculate Pancakge TWAP\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224(\n            (nowCumulativePrice - oldCumulativePrice) / timeElapsed\n        ));\n        // TWAP price with 1e18 decimal mantissa\n        uint256 priceAverageMantissa = priceAverage.decode112with18();\n\n        // To cancel the decimals in cumulative price, we need to mulitply the average price with \n        // tokenBaseUnit / (wbnbBaseUnit or busdBaseUnit, which is 1e18)\n        uint256 pairedTokenBaseUnit = config.isBnbBased ? bnbBaseUnit : busdBaseUnit;\n        uint256 anchorPriceMantissa = (priceAverageMantissa * config.baseUnit)/pairedTokenBaseUnit;\n\n        // if this token is paired with BNB, convert its price to USD\n        if (config.isBnbBased) {\n            uint256 bnbPrice = prices[WBNB];\n            require(bnbPrice != 0, \"bnb price is invalid\");\n            anchorPriceMantissa = (anchorPriceMantissa * bnbPrice) / bnbBaseUnit;\n        }\n\n        require(anchorPriceMantissa != 0, \"twap price cannot be 0\");\n\n        emit AnchorPriceUpdated(config.asset, anchorPriceMantissa, oldTimestamp, block.timestamp);\n        \n        // save anchor price, which is 1e18 decimals\n        prices[config.asset] = anchorPriceMantissa;\n\n        return anchorPriceMantissa;\n    }\n\n    /**\n     * @notice Update new and old observations of lagging window if period elapsed.\n     * @return cumulative price & old observation\n     */\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint256, uint256, uint256) {\n        uint256 cumulativePrice = currentCumulativePrice(config);\n\n        Observation memory newObservation = newObservations[config.asset];\n\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\n        uint256 timeElapsed = block.timestamp - newObservation.timestamp;\n        if (timeElapsed >= config.anchorPeriod) {\n            oldObservations[config.asset].timestamp = newObservation.timestamp;\n            oldObservations[config.asset].acc = newObservation.acc;\n\n            newObservations[config.asset].timestamp = block.timestamp;\n            newObservations[config.asset].acc = cumulativePrice;\n            emit TwapWindowUpdated(\n                config.asset,\n                newObservation.timestamp,\n                block.timestamp, \n                newObservation.acc, \n                cumulativePrice\n            );\n        }\n        return (cumulativePrice, oldObservations[config.asset].acc, oldObservations[config.asset].timestamp);\n    }\n}"
    },
    "contracts/interfaces/BEP20Interface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface BEP20Interface {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/PancakeLibrary.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << 112) / denominator);\n    }\n\n    // decode a uq112x112 into a uint with 18 decimals of precision\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\n        // instead, get close to:\n        //  (x * 1e18) >> 112\n        // without risk of overflowing, e.g.:\n        //  (x) / 2 ** (112 - lg(1e18))\n        return uint(self._x) / 5192296858534827;\n    }\n}\n\n// library with helper methods for oracles that are concerned with computing average prices\nlibrary PancakeOracleLibrary {\n    using FixedPoint for *;\n\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2 ** 32);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices(\n        address pair\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n        blockTimestamp = currentBlockTimestamp();\n        price0Cumulative = IPancakePair(pair).price0CumulativeLast();\n        price1Cumulative = IPancakePair(pair).price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IPancakePair(pair).getReserves();\n        if (blockTimestampLast != blockTimestamp) {\n            unchecked {\n                // subtraction overflow is desired\n                uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n                // addition overflow is desired\n                // counterfactual\n                price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n                // counterfactual\n                price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n            }\n            \n        }\n    }\n}\n\ninterface IPancakePair {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n}"
    },
    "contracts/interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n\ninterface OracleInterface {\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\n}\n\ninterface ResilientOracleInterface is OracleInterface {\n    function updatePrice(address vToken) external;\n}\n\ninterface TwapInterface is OracleInterface {\n    function updateTwap(address vToken) external returns (uint256);\n}\n\ninterface PivotValidatorInterface {\n    function validatePrice(address vToken, uint256 price) external view returns (bool);\n}\n\ninterface PivotOracleInterface is OracleInterface, PivotValidatorInterface {\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}