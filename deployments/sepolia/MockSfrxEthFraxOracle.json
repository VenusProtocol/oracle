{
  "address": "0xB426DD70b4e88fFF4FA0Cf12876120ACB14bB688",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBadData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceHigh",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceLow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isBadData",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_priceLow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceHigh",
          "type": "uint256"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe20baf55a0c097a7612d7aec56bdec0924ece66f00fb1b4994c776af57921dcc",
  "receipt": {
    "to": null,
    "from": "0x464779C41C5f1Be598853C1F87bCC7087Ea75f28",
    "contractAddress": "0xB426DD70b4e88fFF4FA0Cf12876120ACB14bB688",
    "transactionIndex": 38,
    "gasUsed": "264189",
    "logsBloom": "0x
    "blockHash": "0xdc2106f4fe92b632623e4a249cf4d4e019cb9c498a4f0619af3b48a69b718125",
    "transactionHash": "0xe20baf55a0c097a7612d7aec56bdec0924ece66f00fb1b4994c776af57921dcc",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 5994372,
        "transactionHash": "0xe20baf55a0c097a7612d7aec56bdec0924ece66f00fb1b4994c776af57921dcc",
        "address": "0xB426DD70b4e88fFF4FA0Cf12876120ACB14bB688",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000464779c41c5f1be598853c1f87bcc7087ea75f28"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0xdc2106f4fe92b632623e4a249cf4d4e019cb9c498a4f0619af3b48a69b718125"
      }
    ],
    "blockNumber": 5994372,
    "cumulativeGasUsed": "6032482",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5841dc979b2a88890972b7a27c1e9b59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBadData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceHigh\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isBadData\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_priceLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceHigh\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/mocks/MockSFrxEthFraxOracle.sol\":\"MockSfrxEthFraxOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISfrxEthFraxOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\ninterface ISfrxEthFraxOracle {\\n    function getPrices() external view returns (bool _isbadData, uint256 _priceLow, uint256 _priceHigh);\\n}\\n\",\"keccak256\":\"0x1444fbcfe658b985041e7ca5da6cce92fd143ca46d9793316ab2ef542fbde87a\",\"license\":\"BSD-3-Clause\"},\"contracts/oracles/mocks/MockSFrxEthFraxOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport \\\"../../interfaces/ISfrxEthFraxOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MockSfrxEthFraxOracle is ISfrxEthFraxOracle, Ownable {\\n    bool public isBadData;\\n    uint256 public priceLow;\\n    uint256 public priceHigh;\\n\\n    constructor() Ownable() {}\\n\\n    function setPrices(bool _isBadData, uint256 _priceLow, uint256 _priceHigh) external onlyOwner {\\n        isBadData = _isBadData;\\n        priceLow = _priceLow;\\n        priceHigh = _priceHigh;\\n    }\\n\\n    function getPrices() external view override returns (bool, uint256, uint256) {\\n        return (isBadData, priceLow, priceHigh);\\n    }\\n}\\n\",\"keccak256\":\"0xe4f649d490f0db9a32355b6de0db20f23e4ee8b475e9bef78bb34ca48c2136af\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50601733601b565b606b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61035c8061007a6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ea578063bd9a548b14610105578063be00a66e14610137578063f2fde38b1461014057600080fd5b80630683e4ca1461008d5780632ade707e146100a95780635648718b146100be578063715018a6146100e2575b600080fd5b61009660015481565b6040519081526020015b60405180910390f35b6100bc6100b73660046102bc565b610153565b005b6000546100d290600160a01b900460ff1681565b60405190151581526020016100a0565b6100bc610180565b6000546040516001600160a01b0390911681526020016100a0565b600054600154600254600160a01b90920460ff16916040805193151584526020840192909252908201526060016100a0565b61009660025481565b6100bc61014e3660046102f6565b610194565b61015b610212565b60008054931515600160a01b0260ff60a01b1990941693909317909255600155600255565b610188610212565b610192600061026c565b565b61019c610212565b6001600160a01b0381166102065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61020f8161026c565b50565b6000546001600160a01b031633146101925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101fd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000606084860312156102d157600080fd5b833580151581146102e157600080fd5b95602085013595506040909401359392505050565b60006020828403121561030857600080fd5b81356001600160a01b038116811461031f57600080fd5b939250505056fea26469706673582212202d2484c3cea77127165a22bbf682ff3c65ff59351185afdd645731643734cc1d64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ea578063bd9a548b14610105578063be00a66e14610137578063f2fde38b1461014057600080fd5b80630683e4ca1461008d5780632ade707e146100a95780635648718b146100be578063715018a6146100e2575b600080fd5b61009660015481565b6040519081526020015b60405180910390f35b6100bc6100b73660046102bc565b610153565b005b6000546100d290600160a01b900460ff1681565b60405190151581526020016100a0565b6100bc610180565b6000546040516001600160a01b0390911681526020016100a0565b600054600154600254600160a01b90920460ff16916040805193151584526020840192909252908201526060016100a0565b61009660025481565b6100bc61014e3660046102f6565b610194565b61015b610212565b60008054931515600160a01b0260ff60a01b1990941693909317909255600155600255565b610188610212565b610192600061026c565b565b61019c610212565b6001600160a01b0381166102065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61020f8161026c565b50565b6000546001600160a01b031633146101925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101fd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000606084860312156102d157600080fd5b833580151581146102e157600080fd5b95602085013595506040909401359392505050565b60006020828403121561030857600080fd5b81356001600160a01b038116811461031f57600080fd5b939250505056fea26469706673582212202d2484c3cea77127165a22bbf682ff3c65ff59351185afdd645731643734cc1d64736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 859,
        "contract": "contracts/oracles/mocks/MockSFrxEthFraxOracle.sol:MockSfrxEthFraxOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1449,
        "contract": "contracts/oracles/mocks/MockSFrxEthFraxOracle.sol:MockSfrxEthFraxOracle",
        "label": "isBadData",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1451,
        "contract": "contracts/oracles/mocks/MockSFrxEthFraxOracle.sol:MockSfrxEthFraxOracle",
        "label": "priceLow",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1453,
        "contract": "contracts/oracles/mocks/MockSFrxEthFraxOracle.sol:MockSfrxEthFraxOracle",
        "label": "priceHigh",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
